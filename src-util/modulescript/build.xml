<?xml version="1.0" encoding="UTF-8" ?>
<!--
*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2010-2014 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************
-->

<project name="openbravo-modulescript" default="compile" basedir=".">
  <property name="build.module" value="build/classes" />
  <property name="build.module.sqlc" value="build/javasqlc" />
  <property name="build.module.src" value="src" />
  <property name="main.dir" value="${basedir}/../.." />

  <path id="modulescript.class.path">
    <pathelement path="build/classes" />
    <dirset dir="${base.modules}">
      <include name="*/build/classes/" />
    </dirset>
    <dirset dir="${base.modules_core}" erroronmissingdir="${isSourceJar}">
      <include name="*/build/classes/" />
    </dirset>
    <fileset dir="${base.lib}" erroronmissingdir="${isSourceJar}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${extra.modules.location}" erroronmissingdir="false" >
      <include name="*/build/classes/" />
    </fileset>
    <pathelement path="${base.config}" />
    <path refid="project.class.path" />
  </path>

  <condition property="module.not.provided">
    <equals arg1="${module}" arg2="%" />
  </condition>
  <condition property="checkCore">
    <equals arg1="${module}" arg2="org.openbravo" />
  </condition>

  <target name="modules.dirs.check">
    <!--  Conditions when the core is in Sources  -->
    <condition property="module.dir.exists">
      <and>
        <istrue value="${isSourceJar}" />
        <available file="${base.modules}/${module}" type="dir" />
      </and>
    </condition>
    <condition property="module.core.dir.exists" >
      <and >
        <istrue value="${isSourceJar}" />
        <available file="${base.modules_core}/${module}" type="dir" />
      </and>
    </condition>
    <!--  Conditions when the core is in Jar  -->
    <condition property="extra.module.dir.exists" >
      <and >
        <isfalse value="${isSourceJar}" />
        <available file="${extra.modules.location}/${module}" type="dir" />
      </and>
    </condition>
  </target>

  <target name="create.module.dirs" depends="modules.dirs.check" if="module.dir.exists" >
    <mkdir dir="${base.modules}/${module}/build/" />
    <mkdir dir="${base.modules}/${module}/build/javasqlc" />
    <mkdir dir="${base.modules}/${module}/build/classes" />
  </target>

  <target name="create.module.core.dirs" depends="modules.dirs.check" if="module.core.dir.exists" >
    <mkdir dir="${base.modules_core}/${module}/build/" />
    <mkdir dir="${base.modules_core}/${module}/build/javasqlc" />
    <mkdir dir="${base.modules_core}/${module}/build/classes" />
  </target>

  <target name="create.extra.module.dirs" depends="modules.dirs.check" if="extra.module.dir.exists" >
    <mkdir dir="${extra.modules.location}/${module}/build/" />
    <mkdir dir="${extra.modules.location}/${module}/build/javasqlc" />
    <mkdir dir="${extra.modules.location}/${module}/build/classes" />
  </target>

  <target name="init" depends="modules.dirs.check, create.module.dirs, create.module.core.dirs, create.extra.module.dirs" if="isSourceJar">
    <mkdir dir="${build.module}" />
    <mkdir dir="${build.module.sqlc}" />
    <mkdir dir="${build.module.sqlc}/src" />
  </target>

  <target name="clean">
    <delete dir="${build.module}" failonerror="false" includeemptydirs="true" />
    <delete dir="${build.module.sqlc}" failonerror="false" includeemptydirs="true" />
  </target>

  <target name="sqlcCore" depends="init" if="checkCore">
    <java classname="org.openbravo.data.Sqlc" jvm="${env.JAVA_HOME}/bin/java" fork="yes" maxmemory="${build.maxmemory}">
      <arg line="'${base.config}'/Openbravo.properties .xsql ./src/org '${build.module.sqlc}' null false" />
      <classpath refid="modulescript.class.path" />
      <syspropertyset>
        <propertyref name="java.security.egd" />
      </syspropertyset>
    </java>
    <javac srcdir="${build.module.sqlc}/src" includes="**/*.java" destdir="${build.module}" fork="true" encoding="UTF-8" debug="true" debuglevel="lines,vars,source" includeantruntime="false">
      <classpath refid="modulescript.class.path" />
    </javac>
  </target>

  <target name="sqlcModules" depends="init" if="module.dir.exists" unless="checkCore">
    <java classname="org.openbravo.data.Sqlc" jvm="${env.JAVA_HOME}/bin/java" fork="yes" maxmemory="${build.maxmemory}">
      <arg line="'${base.config}'/Openbravo.properties .xsql '${base.modules}' '${base.modules}'/'${module}'/src-util/modulescript/src '${module}'/src-util/modulescript false" />
      <classpath refid="modulescript.class.path" />
      <syspropertyset>
        <propertyref name="java.security.egd" />
      </syspropertyset>
    </java>
    <javac srcdir="${base.modules}/${module}/src-util/modulescript/src" includes="**/*.java" fork="true" destdir="${base.modules}/${module}/build/classes" encoding="UTF-8" debug="true" debuglevel="lines,vars,source" includeantruntime="false">
      <classpath refid="modulescript.class.path" />
    </javac>
  </target>

  <target name="sqlcModulesCore" depends="init" if="module.core.dir.exists" unless="checkCore">
    <java classname="org.openbravo.data.Sqlc" jvm="${env.JAVA_HOME}/bin/java" fork="yes" maxmemory="${build.maxmemory}">
      <arg line="'${base.config}'/Openbravo.properties .xsql '${base.modules_core}' '${base.modules_core}'/'${module}'/src-util/modulescript/src '${module}'/src-util/modulescript false" />
      <classpath refid="modulescript.class.path" />
      <syspropertyset>
        <propertyref name="java.security.egd" />
      </syspropertyset>
    </java>
    <javac srcdir="${base.modules_core}/${module}/src-util/modulescript/src" includes="**/*.java" fork="true" destdir="${base.modules_core}/${module}/build/classes" encoding="UTF-8" debug="true" debuglevel="lines,vars,source" includeantruntime="false">
      <classpath refid="modulescript.class.path" />
    </javac>
  </target>

  <target name="sqlcExtraModule" depends="init" if="extra.module.dir.exists" unless="checkCore">
    <java classname="org.openbravo.data.Sqlc" jvm="${env.JAVA_HOME}/bin/java" fork="yes" maxmemory="${build.maxmemory}">
      <arg line="'${base.config}'/Openbravo.properties .xsql '${extra.modules.location}' '${extra.modules.location}'/'${module}'/src-util/modulescript/src '${module}'/src-util/modulescript false" />
      <classpath refid="modulescript.class.path" />
      <syspropertyset>
        <propertyref name="java.security.egd" />
      </syspropertyset>
    </java>
    <javac srcdir="${extra.modules.location}/${module}/src-util/modulescript/src" includes="**/*.java" destdir="${extra.modules.location}/${module}/build/classes" fork="true" encoding="UTF-8" debug="true" debuglevel="lines,vars,source" includeantruntime="false">
      <classpath refid="modulescript.class.path" />
    </javac>
  </target>

  <target name="javacCore" if="checkCore">
    <javac srcdir="${main.dir}" includes="src-util/modulescript/src/**/*.java" destdir="${build.module}" fork="true" deprecation="on" encoding="UTF-8" debug="true" debuglevel="lines,vars,source" includeantruntime="false">
      <classpath refid="modulescript.class.path" />
    </javac>
  </target>

  <target name="javacModule" if="module.dir.exists" unless="checkCore">
    <javac srcdir="${main.dir}" includes="modules/${module}/src-util/modulescript/**/*.java" fork="true" destdir="${main.dir}/modules/${module}/build/classes" deprecation="on" encoding="UTF-8" debug="true" debuglevel="lines,vars,source" includeantruntime="false">
      <classpath refid="modulescript.class.path" />
    </javac>
  </target>

  <target name="javacModuleCore" if="module.core.dir.exists" unless="checkCore">
    <echo message="Javac core module: ${module}"/>
    <javac srcdir="${main.dir}" includes="modules_core/${module}/src-util/modulescript/**/*.java" fork="true" destdir="${base.modules_core}/${module}/build/classes" deprecation="on" encoding="UTF-8" debug="true" debuglevel="lines,vars,source" includeantruntime="false">
      <classpath refid="modulescript.class.path" />
    </javac>
  </target>

  <target name="javacExtraModule" if="extra.module.dir.exists" unless="checkCore">
    <echo message="Javac extra module: ${module}"/>
    <javac srcdir="${extra.modules.location}" includes="${module}/src-util/modulescript/**/*.java" fork="true" destdir="${extra.modules.location}/${module}/build/classes" deprecation="on" encoding="UTF-8" debug="true" debuglevel="lines,vars,source" includeantruntime="false">
      <classpath refid="modulescript.class.path" />
    </javac>
  </target>

  <target name="compile" depends="checkmodule, check.module.exists, init, sqlcCore, sqlcModules, sqlcModulesCore, sqlcExtraModule, javacCore, javacModule, javacModuleCore, javacExtraModule">
  </target>

  <target name="module.provided.exists.check" depends="modules.dirs.check">
    <condition property="module.provided.exists">
      <or>
        <istrue value="${module.dir.exists}" />
        <istrue value="${module.core.dir.exists}"/>
        <istrue value="${extra.module.dir.exists}" />
        <istrue value="${checkCore}" />
      </or>
    </condition>
  </target>

  <target name="check.module.exists" depends="module.provided.exists.check" unless="module.provided.exists">
    <fail message="The provided module '${module}' does not exists." />
  </target>

  <target name="checkmodule"  if="module.not.provided">
    <fail>You need to specify a module using the command line parameter '-Dmodule=yourmodule'</fail>
  </target>
  
</project>
