pipeline {

    options {
        disableConcurrentBuilds()
    }

    environment {
        // variable for gradle.properties
            CONTEXT_NAME    = 'etendo'
            BBDD_SID        = 'etendo'
            BBDD_PORT       = '5432'
            BBDD_SYSTEMUSER = 'postgres'
            BBDD_SYSTEMPASS = 'syspass'
            BBDD_USER       = 'tad'
            BBDD_PASSWORD   = 'tad'
            NEXUS_USER      =  credentials('nexus-admin-user')
            NEXUS_PASSWORD  =  credentials('nexus-admin-passwd')
            JAVA_HOME       = '/usr/lib/jvm/java-11-openjdk-amd64'
            CATALINA_HOME   = "${WORKSPACE}/apache-tomcat-8.5.75"
            ACCESS_TOKEN    = credentials('access_token')
    }

    agent {
        label 'etendo_core' //The id of the slave/agent where the build should be executed, if it doesn't matter use "agent any" instead.
    }

    stages {
        stage('Build Environment') {
            steps {
                sh 'printenv'
                sh 'chmod a+x ./pipelines/unittests/build-update.sh'
                sh './pipelines/unittests/build-update.sh etendo_core pending "Starting build" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
                sh """
                echo -e "context.name=${CONTEXT_NAME}\n
                bbdd.sid=${BBDD_SID}\n
                bbdd.port=${BBDD_PORT}\n
                bbdd.systemUser=${BBDD_SYSTEMUSER}\n
                bbdd.systemPassword=${BBDD_SYSTEMPASS}\n
                bbdd.user=${BBDD_USER}\n
                bbdd.password=${BBDD_PASSWORD}\n
                nexusUser=${NEXUS_USER}\n
                nexusPassword=${NEXUS_PASSWORD}\n
                allow.root=true\n
                org.gradle.jvmargs=-Xmx2g -XX:MaxPermSize=1024m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" > gradle.properties
                """
                sh './gradlew prepareConfig --info --stacktrace'  //run a gradle task
                sh 'wget -O apache-tomcat-8.5.75.tar.gz https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.75/bin/apache-tomcat-8.5.75.tar.gz'
                sh 'tar -xvf apache-tomcat-8.5.75.tar.gz -C $WORKSPACE'
                sh './gradlew setup --info --stacktrace' //run a gradle task
                sh './gradlew expandModules --info --stacktrace' //run a gradle task
                sh './gradlew install --info --stacktrace' //run a gradle task
                sh './gradlew smartbuild --info --stacktrace' //run a gradle task
                sh '$WORKSPACE/apache-tomcat-8.5.75/bin/catalina.sh start '
                sh 'sleep 1m'
                script {
                    env.STATUSTEST = "1" //flag to indicate if any test failed
                }
            }
            post {
                success {
                    sh './pipelines/unittests/build-update.sh etendo_core pending "Build successful" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
                }
                failure {
                    sh './pipelines/unittests/build-update.sh etendo_core pending "Build failed" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
                }
            }
        }
//___________________________________________________________________________________________
// ------------------------------ WEB SERVICE TEST ------------------------------------------
        stage ('Web Service Test Suite'){
            steps {
                sh './pipelines/unittests/build-update.sh etendo_core pending "Run test suites" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
                script {
                    try {
                        sh './gradlew test --tests org.openbravo.test.WebserviceTestSuite --info || ./gradlew test --tests org.openbravo.test.WebserviceTestSuite --info '
                        publishHTML([
                            allowMissing: true,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'build/reports/tests/test',
                            reportFiles: '*.html',
                            reportName: 'WEB SERVICES TESTS REPORT',
                            reportTitles: ''
                        ])
                    } catch (Exception e) {
                        echo 'Exception occurred: ' + e.toString()
                        echo '....TEST WEBSERVICE FAILED....'
                        currentBuild.result = 'UNSTABLE'
                        unstable('Web Service Test Failed')
                        env.STATUSTEST = "0"
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'build/reports/tests/test',
                            reportFiles: '*.html',
                            reportName: 'WEBSERVICES TESTS REPORT',
                            reportTitles: ''
                        ])
                    }
                }
                sh '$WORKSPACE/apache-tomcat-8.5.75/bin/catalina.sh stop'
                sh './gradlew --stop'
            }
        }
//___________________________________________________________________________________________
// -------------------------------- CLEAN DATABASE ------------------------------------------
        stage('Clean Database') {
            steps {
                sh 'PGPASSWORD=$BBDD_SYSTEMPASS psql -h localhost -d $BBDD_SYSTEMUSER -U $BBDD_SYSTEMUSER -c "DROP DATABASE etendo;"'
                sh './gradlew install --info --stacktrace' //run a gradle task
                sh './gradlew smartbuild --info' //run a gradle task
            }
        }
//___________________________________________________________________________________________
// ------------------------------- STANDALONE TEST ------------------------------------------
        stage ('Standalone Test Suite'){
            steps {
                script {
                    try {
                        sh './gradlew test --tests org.openbravo.test.StandaloneTestSuite --info '
                        publishHTML([
                            allowMissing: true,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'build/reports/tests/test',
                            reportFiles: '*.html',
                            reportName: 'STANDALONE TESTS REPORT',
                            reportTitles: ''
                        ])
                    } catch (Exception e) {
                        echo 'Exception occurred: ' + e.toString()
                        echo '....TEST STANDALONE FAILED....'
                        currentBuild.result = 'UNSTABLE'
                        unstable('Standalone Test Failed!')
                        env.STATUSTEST = "0"
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'build/reports/tests/test',
                            reportFiles: '*.html',
                            reportName: 'STANDALONE TESTS REPORT',
                            reportTitles: ''
                        ])
                    }
                }
            }
        }
//___________________________________________________________________________________________
// ----------------------------------- SPOCK TEST -------------------------------------------
        stage ('Spock Test'){
            steps {
                script {
                    try {
                        sh './gradlew test --tests "com.etendoerp.*" --info'
                        publishHTML([
                            allowMissing: true,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'build/spock-reports/',
                            reportFiles: '*.html',
                            reportName: 'SPOCK TESTS REPORT',
                            reportTitles: ''
                        ])
                    } catch (Exception e) {
                        echo 'Exception occurred: ' + e.toString()
                        echo '....TEST SPOCK FAILED....'
                        currentBuild.result = 'UNSTABLE'
                        unstable('Spock Test failed!')
                        env.STATUSTEST = "0"
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'build/spock-reports/',
                            reportFiles: '*.html',
                            reportName: 'SPOCK TESTS REPORT',
                            reportTitles: ''
                        ])
                    }
                }
            }
        }

        stage('Run Deploy Snapshot') {
            when {
                allOf {
                    branch 'develop'
                    expression {
                        env.STATUSTEST == "1"
                    }
                }
            }
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'my-credentials', keyFileVariable: 'keyfile')]) {
                    withCredentials([usernamePassword(credentialsId: "etendo_bot_credentials", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh """
                        git config user.name "$GIT_USERNAME"
                        git config user.email "$GIT_USERNAME"
                        """
                        sh './pipelines/unittests/build-update.sh etendo_core pending "Deploying snapshot" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
                        sh 'echo version.ts=\$(date +\"%s\") > version.properties'
                        sh './gradlew publishCoreJar --info'
                        sh 'git tag \"v\$(grep version.ts version.properties|cut -c 11-)\" -m \"Release SNAPSHOT \$(grep version.tag version.properties|cut -c 13-)\"'
                        sh 'GIT_SSH_COMMAND=\"ssh -i ${keyfile}\" git push $GIT_URL \"v\$(grep version.ts version.properties|cut -c 11-)\"'
                    }
                }
            }
            post {
                success {
                    sh './pipelines/unittests/build-update.sh etendo_core pending "Snapshot deployed" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
                }
                failure {
                    sh './pipelines/unittests/build-update.sh etendo_core pending "Snapshot deploy failed" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
                }
            }
        }
    }
    post{
        always {
            script {
                if (env.STATUSTEST == "1") {
                    sh './pipelines/unittests/build-update.sh etendo_core success "Successful Test Suites" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
                    echo "Successful Test"
                } else if (env.STATUSTEST == "0") {
                    sh './pipelines/unittests/build-update.sh etendo_core failure "Failed Test Suites" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
                    echo "Failed Test"
                }
            }
            sh './gradlew --stop'
            sh 'PGPASSWORD=$BBDD_SYSTEMPASS psql -h localhost -d $BBDD_SYSTEMUSER -U $BBDD_SYSTEMUSER -c "DROP DATABASE etendo;"'
            cleanWs deleteDirs: true
        }
    }
}